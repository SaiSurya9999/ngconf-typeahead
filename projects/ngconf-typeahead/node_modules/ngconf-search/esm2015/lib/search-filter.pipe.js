import { Pipe } from '@angular/core';
export class SearchFilterPipe {
    transform(value, opt) {
        //If Array in ngFor is empty
        if (!value)
            return null;
        //If Search term is Empty
        if (!opt.term)
            return value;
        //For Better Results
        opt.term = opt.term.toString().toLowerCase();
        //let result = value.map(({ name }) => name);
        //let result = value.map(a => a.name);
        if (opt.prop) {
            if (opt.prop.toString() != "") {
                let result = value.map(a => a[opt.prop.toString()]);
                //Filtered Results based on Search Term
                return value.filter(function (item) {
                    // console.log(item);
                    return JSON.stringify(item[opt.prop.toString()]).toLowerCase().includes(opt.term.toString());
                });
            }
        }
        else {
            //Filtered Results based on Search Term
            return value.filter(function (item) {
                // console.log(item);
                return JSON.stringify(item).toLowerCase().includes(opt.term.toString());
            });
        }
    }
}
SearchFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'searchFilter',
                pure: false
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZpbHRlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdjb25mLXNlYXJjaC9zcmMvbGliL3NlYXJjaC1maWx0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQWFwRCxNQUFNLE9BQU8sZ0JBQWdCO0lBRTNCLFNBQVMsQ0FBQyxLQUFVLEVBQUUsR0FBUztRQUU3Qiw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN4Qix5QkFBeUI7UUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFNUIsb0JBQW9CO1FBQ3BCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU3Qyw2Q0FBNkM7UUFDN0Msc0NBQXNDO1FBRXRDLElBQUksR0FBRyxDQUFDLElBQUksRUFBRTtZQUNaLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQzdCLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELHVDQUF1QztnQkFDdkMsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSTtvQkFDaEMscUJBQXFCO29CQUNyQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQy9GLENBQUMsQ0FBQyxDQUFDO2FBQ0o7U0FDRjthQUFNO1lBQ0wsdUNBQXVDO1lBQ3ZDLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUk7Z0JBQ2hDLHFCQUFxQjtnQkFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDMUUsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUdILENBQUM7OztZQXRDRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLElBQUksRUFBRSxLQUFLO2FBQ1oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vQ29uZmlndXJhdGlvbiBmb3IgUGlwZSBJbnB1dCBBcmdzXG5leHBvcnQgaW50ZXJmYWNlIG9wdCB7XG4gIHRlcm06IHN0cmluZztcbiAgcHJvcDogc3RyaW5nO1xufVxuXG5AUGlwZSh7XG4gIG5hbWU6ICdzZWFyY2hGaWx0ZXInLFxuICBwdXJlOiBmYWxzZVxufSlcblxuZXhwb3J0IGNsYXNzIFNlYXJjaEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgb3B0Pzogb3B0KTogYW55IHtcblxuICAgIC8vSWYgQXJyYXkgaW4gbmdGb3IgaXMgZW1wdHlcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gbnVsbDtcbiAgICAvL0lmIFNlYXJjaCB0ZXJtIGlzIEVtcHR5XG4gICAgaWYgKCFvcHQudGVybSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgLy9Gb3IgQmV0dGVyIFJlc3VsdHNcbiAgICBvcHQudGVybSA9IG9wdC50ZXJtLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vbGV0IHJlc3VsdCA9IHZhbHVlLm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpO1xuICAgIC8vbGV0IHJlc3VsdCA9IHZhbHVlLm1hcChhID0+IGEubmFtZSk7XG5cbiAgICBpZiAob3B0LnByb3ApIHtcbiAgICAgIGlmIChvcHQucHJvcC50b1N0cmluZygpICE9IFwiXCIpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHZhbHVlLm1hcChhID0+IGFbb3B0LnByb3AudG9TdHJpbmcoKV0pO1xuICAgICAgICAvL0ZpbHRlcmVkIFJlc3VsdHMgYmFzZWQgb24gU2VhcmNoIFRlcm1cbiAgICAgICAgcmV0dXJuIHZhbHVlLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShpdGVtW29wdC5wcm9wLnRvU3RyaW5nKCldKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG9wdC50ZXJtLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy9GaWx0ZXJlZCBSZXN1bHRzIGJhc2VkIG9uIFNlYXJjaCBUZXJtXG4gICAgICByZXR1cm4gdmFsdWUuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaXRlbSkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhvcHQudGVybS50b1N0cmluZygpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gIH1cblxufVxuIl19