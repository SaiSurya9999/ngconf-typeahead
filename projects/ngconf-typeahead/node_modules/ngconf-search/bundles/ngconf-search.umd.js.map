{"version":3,"file":"ngconf-search.umd.js","sources":["../../../projects/ngconf-search/src/lib/ngconf-search.service.ts","../../../projects/ngconf-search/src/lib/ngconf-search.component.ts","../../../projects/ngconf-search/src/lib/search-filter.pipe.ts","../../../projects/ngconf-search/src/lib/ngconf-search.module.ts","../../../projects/ngconf-search/src/public-api.ts","../../../projects/ngconf-search/src/ngconf-search.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgconfSearchService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngconf-search',\n  template: `\n    <p>\n      ngconf-search works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgconfSearchComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n//Configuration for Pipe Input Args\nexport interface opt {\n  term: string;\n  prop: string;\n}\n\n@Pipe({\n  name: 'searchFilter',\n  pure: false\n})\n\nexport class SearchFilterPipe implements PipeTransform {\n\n  transform(value: any, opt?: opt): any {\n\n    //If Array in ngFor is empty\n    if (!value) return null;\n    //If Search term is Empty\n    if (!opt.term) return value;\n\n    //For Better Results\n    opt.term = opt.term.toString().toLowerCase();\n\n    //let result = value.map(({ name }) => name);\n    //let result = value.map(a => a.name);\n\n    if (opt.prop) {\n      if (opt.prop.toString() != \"\") {\n        let result = value.map(a => a[opt.prop.toString()]);\n        //Filtered Results based on Search Term\n        return value.filter(function (item) {\n          // console.log(item);\n          return JSON.stringify(item[opt.prop.toString()]).toLowerCase().includes(opt.term.toString());\n        });\n      }\n    } else {\n      //Filtered Results based on Search Term\n      return value.filter(function (item) {\n        // console.log(item);\n        return JSON.stringify(item).toLowerCase().includes(opt.term.toString());\n      });\n    }\n\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgconfSearchComponent } from './ngconf-search.component';\nimport { SearchFilterPipe } from './search-filter.pipe';\n\n\n\n@NgModule({\n  declarations: [NgconfSearchComponent,SearchFilterPipe],\n  imports: [\n  ],\n  exports: [NgconfSearchComponent,SearchFilterPipe]\n})\nexport class NgconfSearchModule { }\n","/*\n * Public API Surface of ngconf-search\n */\n\nexport * from './lib/ngconf-search.service';\nexport * from './lib/ngconf-search.component';\nexport * from './lib/ngconf-search.module';\nexport * from './lib/search-filter.pipe';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Injectable","Component","Pipe","NgModule"],"mappings":";;;;;;;QAOE;SAAiB;;;;;gBALlBA,aAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;QCUC;SAAiB;QAEjB,wCAAQ,GAAR;SACC;;;;gBAfFC,YAAS,SAAC;oBACT,QAAQ,EAAE,mBAAmB;oBAC7B,QAAQ,EAAE,qDAIT;iBAGF;;;;;QCED;;QAEE,oCAAS,GAAT,UAAU,KAAU,EAAE,GAAS;;YAG7B,IAAI,CAAC,KAAK;gBAAE,OAAO,IAAI,CAAC;;YAExB,IAAI,CAAC,GAAG,CAAC,IAAI;gBAAE,OAAO,KAAK,CAAC;;YAG5B,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;;;YAK7C,IAAI,GAAG,CAAC,IAAI,EAAE;gBACZ,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE;oBAC7B,IAAI,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAA,CAAC,CAAC;;oBAEpD,OAAO,KAAK,CAAC,MAAM,CAAC,UAAU,IAAI;;wBAEhC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;qBAC9F,CAAC,CAAC;iBACJ;aACF;iBAAM;;gBAEL,OAAO,KAAK,CAAC,MAAM,CAAC,UAAU,IAAI;;oBAEhC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;iBACzE,CAAC,CAAC;aACJ;SAGF;;;;gBAtCFC,OAAI,SAAC;oBACJ,IAAI,EAAE,cAAc;oBACpB,IAAI,EAAE,KAAK;iBACZ;;;;QCCD;;;;;gBANCC,WAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,qBAAqB,EAAC,gBAAgB,CAAC;oBACtD,OAAO,EAAE,EACR;oBACD,OAAO,EAAE,CAAC,qBAAqB,EAAC,gBAAgB,CAAC;iBAClD;;;ICXD;;;;ICAA;;;;;;;;;;;;;;;;;"}