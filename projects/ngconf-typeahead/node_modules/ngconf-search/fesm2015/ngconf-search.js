import { ɵɵdefineInjectable, Injectable, Component, Pipe, NgModule } from '@angular/core';

class NgconfSearchService {
    constructor() { }
}
NgconfSearchService.ɵprov = ɵɵdefineInjectable({ factory: function NgconfSearchService_Factory() { return new NgconfSearchService(); }, token: NgconfSearchService, providedIn: "root" });
NgconfSearchService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgconfSearchService.ctorParameters = () => [];

class NgconfSearchComponent {
    constructor() { }
    ngOnInit() {
    }
}
NgconfSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ngconf-search',
                template: `
    <p>
      ngconf-search works!
    </p>
  `
            },] }
];
NgconfSearchComponent.ctorParameters = () => [];

class SearchFilterPipe {
    transform(value, opt) {
        //If Array in ngFor is empty
        if (!value)
            return null;
        //If Search term is Empty
        if (!opt.term)
            return value;
        //For Better Results
        opt.term = opt.term.toString().toLowerCase();
        //let result = value.map(({ name }) => name);
        //let result = value.map(a => a.name);
        if (opt.prop) {
            if (opt.prop.toString() != "") {
                let result = value.map(a => a[opt.prop.toString()]);
                //Filtered Results based on Search Term
                return value.filter(function (item) {
                    // console.log(item);
                    return JSON.stringify(item[opt.prop.toString()]).toLowerCase().includes(opt.term.toString());
                });
            }
        }
        else {
            //Filtered Results based on Search Term
            return value.filter(function (item) {
                // console.log(item);
                return JSON.stringify(item).toLowerCase().includes(opt.term.toString());
            });
        }
    }
}
SearchFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'searchFilter',
                pure: false
            },] }
];

class NgconfSearchModule {
}
NgconfSearchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgconfSearchComponent, SearchFilterPipe],
                imports: [],
                exports: [NgconfSearchComponent, SearchFilterPipe]
            },] }
];

/*
 * Public API Surface of ngconf-search
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgconfSearchComponent, NgconfSearchModule, NgconfSearchService, SearchFilterPipe };
//# sourceMappingURL=ngconf-search.js.map
